import java.time.Clock

buildscript {
    ext {
        internalDependencies = [
                project(':Shapes'),
                project(':ShapeApp')
        ]
    }
}

plugins {
    id 'java'
    id 'application'
}

group 'org.ruppyrup'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation project (':Shapes')
    implementation project (':ShapeApp')
    implementation project (':BadShapes')
    implementation project (':BadShapeApp')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

ext {
    javaMainClass = "org.ruppyrup.Main"
}

application {
    mainClassName = javaMainClass
}

//jar {
//    archiveName 'ShapeAbstract.jar'
//
//    manifest {
//        attributes(
//                "Main-Class": javaMainClass
//        )
//    }
//    from {configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}}
//}

//task runWithExecJarExecutable(type: Exec) {
//    dependsOn jar
//    group = "Execution"
//    description = "Run the output executable jar with ExecTask"
//    commandLine "java", "-jar", jar.archiveFile.get()
//}

tasks.register('runJar', JavaExec) {
    group 'application'
    classpath tasks.named('jar').map { it.outputs }
    classpath configurations.runtimeClasspath
    mainClass = 'org.ruppyrup.Main'
}


//class TimingsListener implements TaskExecutionListener, BuildListener {
//    private Clock clock
//    private timings = []
//
//    @Override
//    void beforeExecute(Task task) {
//        clock = new Clock()
//    }
//
//    @Override
//    void afterExecute(Task task, TaskState taskState) {
//        def ms = clock.timeInMs
//        timings.add([ms, task.path])
//        task.project.logger.warn "${task.path} took ${ms}ms"
//    }
//
//    @Override
//    void buildFinished(BuildResult result) {
//        println "Task timings:"
//        for (timing in timings) {
//            if (timing[0] >= 50) {
//                printf "%7sms  %s\n", timing
//            }
//        }
//    }
//
//    @Override
//    void buildStarted(Gradle gradle) {}
//
//    @Override
//    void projectsEvaluated(Gradle gradle) {}
//
//    @Override
//    void projectsLoaded(Gradle gradle) {}
//
//    @Override
//    void settingsEvaluated(Settings settings) {}
//}
//
//gradle.addListener new TimingsListener()